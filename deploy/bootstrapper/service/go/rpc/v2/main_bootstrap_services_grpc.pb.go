// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BSServiceClient is the client API for BSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BSServiceClient interface {
	// hide
	NewBootstrap(ctx context.Context, opts ...grpc.CallOption) (BSService_NewBootstrapClient, error)
	GetBootstrap(ctx context.Context, in *GetBSRequest, opts ...grpc.CallOption) (*BS, error)
	ListBootstrap(ctx context.Context, in *ListBSRequest, opts ...grpc.CallOption) (*ListBSResponse, error)
	ExecuteBootstrap(ctx context.Context, in *GetBSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBootstrap(ctx context.Context, in *GetBSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBSServiceClient(cc grpc.ClientConnInterface) BSServiceClient {
	return &bSServiceClient{cc}
}

func (c *bSServiceClient) NewBootstrap(ctx context.Context, opts ...grpc.CallOption) (BSService_NewBootstrapClient, error) {
	stream, err := c.cc.NewStream(ctx, &BSService_ServiceDesc.Streams[0], "/v2.main_bootstrap.services.BSService/NewBootstrap", opts...)
	if err != nil {
		return nil, err
	}
	x := &bSServiceNewBootstrapClient{stream}
	return x, nil
}

type BSService_NewBootstrapClient interface {
	Send(*NewBSRequest) error
	CloseAndRecv() (*NewBSResponse, error)
	grpc.ClientStream
}

type bSServiceNewBootstrapClient struct {
	grpc.ClientStream
}

func (x *bSServiceNewBootstrapClient) Send(m *NewBSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bSServiceNewBootstrapClient) CloseAndRecv() (*NewBSResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NewBSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bSServiceClient) GetBootstrap(ctx context.Context, in *GetBSRequest, opts ...grpc.CallOption) (*BS, error) {
	out := new(BS)
	err := c.cc.Invoke(ctx, "/v2.main_bootstrap.services.BSService/GetBootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bSServiceClient) ListBootstrap(ctx context.Context, in *ListBSRequest, opts ...grpc.CallOption) (*ListBSResponse, error) {
	out := new(ListBSResponse)
	err := c.cc.Invoke(ctx, "/v2.main_bootstrap.services.BSService/ListBootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bSServiceClient) ExecuteBootstrap(ctx context.Context, in *GetBSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v2.main_bootstrap.services.BSService/ExecuteBootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bSServiceClient) DeleteBootstrap(ctx context.Context, in *GetBSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v2.main_bootstrap.services.BSService/DeleteBootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BSServiceServer is the server API for BSService service.
// All implementations must embed UnimplementedBSServiceServer
// for forward compatibility
type BSServiceServer interface {
	// hide
	NewBootstrap(BSService_NewBootstrapServer) error
	GetBootstrap(context.Context, *GetBSRequest) (*BS, error)
	ListBootstrap(context.Context, *ListBSRequest) (*ListBSResponse, error)
	ExecuteBootstrap(context.Context, *GetBSRequest) (*emptypb.Empty, error)
	DeleteBootstrap(context.Context, *GetBSRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBSServiceServer()
}

// UnimplementedBSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBSServiceServer struct {
}

func (UnimplementedBSServiceServer) NewBootstrap(BSService_NewBootstrapServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBootstrap not implemented")
}
func (UnimplementedBSServiceServer) GetBootstrap(context.Context, *GetBSRequest) (*BS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBootstrap not implemented")
}
func (UnimplementedBSServiceServer) ListBootstrap(context.Context, *ListBSRequest) (*ListBSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBootstrap not implemented")
}
func (UnimplementedBSServiceServer) ExecuteBootstrap(context.Context, *GetBSRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBootstrap not implemented")
}
func (UnimplementedBSServiceServer) DeleteBootstrap(context.Context, *GetBSRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBootstrap not implemented")
}
func (UnimplementedBSServiceServer) mustEmbedUnimplementedBSServiceServer() {}

// UnsafeBSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BSServiceServer will
// result in compilation errors.
type UnsafeBSServiceServer interface {
	mustEmbedUnimplementedBSServiceServer()
}

func RegisterBSServiceServer(s grpc.ServiceRegistrar, srv BSServiceServer) {
	s.RegisterService(&BSService_ServiceDesc, srv)
}

func _BSService_NewBootstrap_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BSServiceServer).NewBootstrap(&bSServiceNewBootstrapServer{stream})
}

type BSService_NewBootstrapServer interface {
	SendAndClose(*NewBSResponse) error
	Recv() (*NewBSRequest, error)
	grpc.ServerStream
}

type bSServiceNewBootstrapServer struct {
	grpc.ServerStream
}

func (x *bSServiceNewBootstrapServer) SendAndClose(m *NewBSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bSServiceNewBootstrapServer) Recv() (*NewBSRequest, error) {
	m := new(NewBSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BSService_GetBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BSServiceServer).GetBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.main_bootstrap.services.BSService/GetBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BSServiceServer).GetBootstrap(ctx, req.(*GetBSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BSService_ListBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BSServiceServer).ListBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.main_bootstrap.services.BSService/ListBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BSServiceServer).ListBootstrap(ctx, req.(*ListBSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BSService_ExecuteBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BSServiceServer).ExecuteBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.main_bootstrap.services.BSService/ExecuteBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BSServiceServer).ExecuteBootstrap(ctx, req.(*GetBSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BSService_DeleteBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BSServiceServer).DeleteBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.main_bootstrap.services.BSService/DeleteBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BSServiceServer).DeleteBootstrap(ctx, req.(*GetBSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BSService_ServiceDesc is the grpc.ServiceDesc for BSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.main_bootstrap.services.BSService",
	HandlerType: (*BSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBootstrap",
			Handler:    _BSService_GetBootstrap_Handler,
		},
		{
			MethodName: "ListBootstrap",
			Handler:    _BSService_ListBootstrap_Handler,
		},
		{
			MethodName: "ExecuteBootstrap",
			Handler:    _BSService_ExecuteBootstrap_Handler,
		},
		{
			MethodName: "DeleteBootstrap",
			Handler:    _BSService_DeleteBootstrap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewBootstrap",
			Handler:       _BSService_NewBootstrap_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "main_bootstrap_services.proto",
}
